on load:
	core_check_yaml("config", "Menus.RegionClaim.Manage.Menu", "&8➩ &a&nManage your region.&r")	
	core_check_yaml("config", "Menus.RegionClaim.Claim.Menu", "&8➩ &a&nClaim your region.&r")	
	core_check_yaml("config", "Menus.RegionClaim.DeleteClaim.Menu", "&8➩ &a&nDelete your region.&r")			
	core_check_yaml("config", "Menus.RegionClaim.ManageMembers.Menu", "&8➩ &a&nManage Members.&r")	
	core_check_yaml("config", "Menus.RegionClaim.ManageMember.Menu", "&8➩ &a&nManage&r &b{player}.&r")		
	core_check_yaml("config", "Menus.RegionClaim.PurchaseRegion.Menu", "&8➩ &a&nPurchase Region.&r")	
	core_check_yaml("config", "Menus.RegionClaim.PurchaseRegion.Size", "1", "number")		
	core_check_yaml_item("config", "Menus.RegionClaim.ManageMember.Kick", "&7❒ &8⬊ &7&nKick member.&r &8⬋ &7❒", "13", "red clay", "&aClick to to kick from this region.")		
	if yaml value "Menus.RegionClaim.Purchase" from "core.config" is not set:
		core_check_yaml("config", "Menus.RegionClaim.Purchase.Small.Size", "50", "number")
		core_check_yaml("config", "Menus.RegionClaim.Purchase.Medium.Size", "125", "number")
		core_check_yaml("config", "Menus.RegionClaim.Purchase.Big.Size", "200", "number")	
		core_check_yaml_item("config", "Menus.RegionClaim.Purchase.Small", "&7❒ &8⬊ &7&nPurchase Small Region.&r &8⬋ &7❒", "2", "grass", "||&8➩ &e25 X 25 Blocks||||&8➩&aClick to purchase this region.")
		core_check_yaml_item("config", "Menus.RegionClaim.Purchase.Medium", "&7❒ &8⬊ &7&nPurchase Medium Region.&r &8⬋ &7❒", "4", "grass", "||&8➩ &e50 X 50 Blocks||||&aClick to purchase this region.")
		core_check_yaml_item("config", "Menus.RegionClaim.Purchase.Big", "&7❒ &8⬊ &7&nPurchase Big Region.&r &8⬋ &7❒", "6", "grass", "||&8➩ &e100 X 100 Blocks||||&aClick to purchase this region.")
	core_check_yaml_item("config", "Menus.RegionClaim.AddMember.Format", "&7❒ &8⬊ &7&nAdd member.&r &8⬋ &7❒", "0", "chest", "&aClick to add a member")	
	core_check_yaml_item("config", "Menus.RegionClaim.ManageMembers.Format", "&7❒ &8⬊ &7&nManage members.&r &8⬋ &7❒", "34", "chest", "&aClick to manage the members")		
	core_check_yaml_item("config", "Menus.RegionClaim.DeleteClaim.Format", "&7❒ &8⬊ &c&nDelete claim &7(No Refund).&r &8⬋ &7❒", "35", "red clay", "&aClick here to delete this claim")			
	core_check_yaml_item("config", "Menus.RegionClaim.MemberManage.Format", "&8➩ &7{player}", "0", "chest", "&7❒ &8⬊ &7&nClick to view options.&r &8⬋ &7❒")			
	core_check_yaml_item("config", "Menus.RegionClaim.ChangeDefaultGreeting", "&7❒ &8⬊ &7&nClick to change the default&r &egreeting &7&nmessage.&r &8⬋ &7❒", "27", "book", "")	
	core_check_yaml_item("config", "Menus.RegionClaim.ChangeDefaultFarewell", "&7❒ &8⬊ &7&nClick to change the default&r &efarewell &7&nmessage.&r &8⬋ &7❒", "28", "book", "")		
	core_check_yaml("config", "Messages.RegionClaim.DefaultGreeting", "&8➩ &aEntering in the region of &e{player}")
	core_check_yaml("config", "Messages.RegionClaim.DefaultFarewell", "&8➩ &aLeaving the region of &e{player}")
	core_check_yaml("config", "Messages.RegionClaim.ChangeGreeting", "&8➩ &7Type in chat the new greeting message, you have &c30&7 seconds, you can use &e{player} &7for your name.")
	core_check_yaml("config", "Messages.RegionClaim.ChangeFarewell", "&8➩ &7Type in chat the new farewell message, you have &c30&7 seconds, you can use &e{player} &7for your name.")	
	core_check_yaml("config", "Messages.RegionClaim.TimeOut", "&8➩ &cTimeout, you failed to type the name.")	
	core_check_yaml("config", "Messages.RegionClaim.ChangeFinish", "&8➩ &aDone.")		
	core_check_yaml("config", "Messages.RegionClaim.ClaimDelete", "&8➩ &cDone, you deleted this claim.")			
	core_check_yaml("config", "Messages.RegionClaim.Overlap", "&8➩ &cThis region overlaps with another region.")			
	core_check_yaml("config", "Messages.RegionClaim.PositionSet", "&8➩ &7Position &e{number} &7set.")
	core_check_yaml("config", "Messages.RegionClaim.PositionNotSet", "&8➩ &7Position &e{number} &7is not set.")	
	core_check_yaml("config", "Messages.RegionClaim.ClaimSuccess", "&8➩ &a&nNice!, you claimed this region.&r")
	core_check_yaml("config", "Messages.RegionClaim.AddedMember", "&8➩ &aNice!, you added &7{player} &ato your region.&r")	
	core_check_yaml("config", "Messages.RegionClaim.PlayerNotFound", "&8➩ &ePlayer not found, are you sure this player is online?.")	
	core_check_yaml("config", "Settings.RegionClaim.EnabledWorlds", "survival", "list")			
	core_check_yaml("config", "Settings.RegionClaim.EnableFences", "true", "boolean")				
	wait a second
	save yaml "core.config"
	broadcast "&7❒ &a&nLeafCORE&r &8➩ &aRegionCaim Module Enabled."
	loop yaml list "Settings.RegionClaim.EnabledWorlds" from "core.config":
		if "%loop-value-1%" parsed as world is set:
			add "%loop-value-1%" parsed as world to {-core::cache::RegionCaim.EnabledWorlds::*}
	loop yaml nodes with keys "Menus.RegionClaim.Purchase" from "core.config":	
		core_cache_item("Menus.RegionClaim.Purchase.%loop-value-1%", "config")			

import:
	org.bukkit.Bukkit
	com.leaf.util.RegionUtils
	com.leaf.events.AnvilGUICompleteEvent

function land_clear_chatAction(p: player):
	delete metadata value "LandChangeDefaultMsg" of {_p}
	delete metadata value "LandChangeDefaultType" of {_p}	

function land_ChangeMsg(p: player, type: text):
	close {_p}'s inventory
	set metadata value "LandChangeDefaultMsg" of {_p} to "WaitingForReply"
	set metadata value "LandChangeDefaultType" of {_p} to {_type}	
	set {_region} to RegionUtils.getRegionAt({_p}.getLocation())
	send yaml value "Messages.RegionClaim.Change%{_type}%" from "core.config" to {_p}
	loop 30*24 times:
		if metadata value "LandChangeDefaultMsg" of {_p} is set:
			wait a tick
		if metadata value "LandChangeDefaultMsg" of {_p} != "WaitingForReply":
			if metadata value "LandChangeDefaultType" of {_p} is "Greeting":
				RegionUtils.setEnterMessage({_region} and metadata value "LandChangeDefaultMsg" of {_p})
			if metadata value "LandChangeDefaultType" of {_p} is "Farewell":
				RegionUtils.setLeaveMessage({_region} and metadata value "LandChangeDefaultMsg" of {_p})					
			land_clear_chatAction({_p})
			send yaml value "Messages.RegionClaim.ChangeFinish" from "core.config" to {_p}
			stop
	send yaml value "Messages.RegionClaim.TimeOut" from "core.config" to {_p}		
	land_clear_chatAction({_p})			

on chat:
	if metadata value "LandChangeDefaultMsg" of player is set:
		cancel event
		if message is "cancel":
			land_clear_chatAction(player)
			stop
		set metadata value "LandChangeDefaultMsg" of player to replacer "{player}" with "%player%" in message

function land_ManageMember(p: player, member: player, region: object):
	open chest inventory with 3 rows named replacer "{player}" with "%{_member}%" in yaml value "Menus.RegionClaim.ManageMember.Menu" from "core.config" to {_p}
	wait a tick
	make gui slot yaml value "Menus.RegionClaim.ManageMember.Kick.Slot" from "core.config" of {_p} with {-core::cache::Menus.RegionClaim.ManageMember.Kick::config} to run:
		set {_uuid} to uuid of {_member}
		RegionUtils.removeMember({_region} and {_member})
		land_ManageRegion({_p} and RegionUtils.getRegionAt({_p}.getLocation()))	
		delete yaml value "Region.%{_region}.getId()%.Members.%{_uuid}%" from "core.player.data.%uuid of {_p}%"
		save yaml "core.player.data.%uuid of {_p}%"

function land_BrowseMembers(p: player, region: object):
	open chest inventory with 6 rows named yaml value "Menus.RegionClaim.ManageMembers.Menu" from "core.config" to {_p}
	wait a tick	
	make gui slot 49 of {_p} with {-core::cache::General.Back::config} to run:	
		land_ManageRegion({_p}, {_region})
		stop		
	set {_slot} to 0		
	loop yaml nodes with keys "Region.%{_region}.getId()%.Members" from "core.player.data.%uuid of {_p}%":
		set {_member} to loop-value-1
		set {_check} to {_member} parsed as offline player		
		set {_name} to yaml value "Region.%{_region}.getId()%.Members.%{_member}%.Name" from "core.player.data.%uuid of {_p}%"
		set {_skull} to yaml value "Region.%{_region}.getId()%.Members.%{_member}%.Skull" from "core.player.data.%uuid of {_p}%"
		make gui slot {_slot} of {_p} with {_skull} named replacer "{player}" with "%{_name}%" in yaml value "Menus.RegionClaim.MemberManage.Format.Name" from "core.config" with lore yaml list "Menus.RegionClaim.MemberManage.Format.Lore" from "core.config" to run function land_ManageMember({_p}, {_check}, {_region})
		add 1 to {_slot}
		wait a tick

function land_addMember(p: player, member: player, region: object):
	RegionUtils.addMember({_region} and {_member})
	set {_uuid} to uuid of {_member}
	send replacer "{player}" with "%{_member}%" in yaml value "Messages.RegionClaim.AddedMember" from "core.config" to {_p}
	set yaml value "Region.%{_region}.getId()%.Members.%{_uuid}%.Name" from "core.player.data.%uuid of {_p}%" to "%{_member}%"
	set yaml value "Region.%{_region}.getId()%.Members.%{_uuid}%.Skull" from "core.player.data.%uuid of {_p}%" to {_i}
	save yaml "core.player.data.%uuid of {_p}%"

AnvilGUICompleteEvent:
	if metadata value "LandAddMember" of event.getPlayer() is "WaitingForReply":
		if event.getString() parsed as player != event.getPlayer():
			set {_player} to event.getString() parsed as player
		if {_player} is set:
			set {_region} to RegionUtils.getRegionAt(event.getPlayer().getLocation())
			land_addMember(event.getPlayer(), {_player}, {_region})
		else:
			send yaml value "Messages.RegionClaim.PlayerNotFound" from "core.config" to event.getPlayer()
		delete metadata value "LandAddMember" of event.getPlayer()

function land_ManageRegion(p: player, region: object):
	open chest inventory with 4 rows named yaml value "Menus.RegionClaim.Manage.Menu" from "core.config" to {_p}
	wait a tick
	make gui slot yaml value "Menus.RegionClaim.ChangeDefaultGreeting.Slot" from "core.config" of {_p} with {-core::cache::Menus.RegionClaim.ChangeDefaultGreeting::config} to run function land_ChangeMsg({_p}, "Greeting")
	make gui slot yaml value "Menus.RegionClaim.ChangeDefaultFarewell.Slot" from "core.config" of {_p} with {-core::cache::Menus.RegionClaim.ChangeDefaultFarewell::config} to run function land_ChangeMsg({_p}, "Farewell")
	make gui slot yaml value "Menus.RegionClaim.ManageMembers.Format.Slot" from "core.config" of {_p} with {-core::cache::Menus.RegionClaim.ManageMembers.Format::config} to run function land_BrowseMembers({_p}, {_region})
	make gui slot yaml value "Menus.RegionClaim.DeleteClaim.Format.Slot" from "core.config" of {_p} with {-core::cache::Menus.RegionClaim.DeleteClaim.Format::config} to run:
		open chest inventory with 6 rows named yaml value "Menus.RegionClaim.DeleteClaim.Menu" from "core.config" to {_p}
		wait a tick	
		set {_int} to a random number between 0 and 54
		make gui slot {_int} of {_p} with {-core::cache::Menus.RegionClaim.DeleteClaim.Format::config} to run:	
			RegionUtils.deleteRegion({_region} and {_p}.getWorld())
			send yaml value "Messages.RegionClaim.ClaimDelete" from "core.config" to {_p}
			close {_p}'s inventory
	make gui slot yaml value "Menus.RegionClaim.AddMember.Format.Slot" from "core.config" of {_p} with {-core::cache::Menus.RegionClaim.AddMember.Format::config} to run:
		set metadata value "LandAddMember" of {_p} to "WaitingForReply"
		open anvil gui with player head and air named "Enter Player" to {_p}

function landBrowsePurchase(p: player):
	open chest inventory with yaml value "Menus.RegionClaim.PurchaseRegion.Size" from "core.config" rows named yaml value "Menus.RegionClaim.PurchaseRegion.Menu" from "core.config" to {_p}
	wait a tick
	loop yaml nodes with keys "Menus.RegionClaim.Purchase" from "core.config":
		set {_id} to loop-value-1
		set {_price} to yaml value "Menus.RegionClaim.Purchase.%{_id}%.Price" from "core.config"
		set {_lore::*} to yaml list "Menus.RegionClaim.Purchase.%{_id}%.Lore" from "core.config"
		replace all "{price}" with "%{_price}%" in {_lore::*} 
		make gui slot yaml value "Menus.RegionClaim.Purchase.%{_id}%.Slot" from "core.config" of {_p} with {-core::cache::Menus.RegionClaim.Purchase.%{_id}%::config} with leaf lore {_lore::*} to run:	
			set {-core::cache::player::%{_p}%::region::position1} to location of {_p}
			set {-core::cache::player::%{_p}%::region::position2} to location of {_p}
			add yaml value "Menus.RegionClaim.Purchase.%{_id}%.Size" from "core.config" to z-coords of {-core::cache::player::%{_p}%::region::position1}
			add yaml value "Menus.RegionClaim.Purchase.%{_id}%.Size" from "core.config" to x-coords of {-core::cache::player::%{_p}%::region::position1}
			remove yaml value "Menus.RegionClaim.Purchase.%{_id}%.Size" from "core.config" from z-coords of {-core::cache::player::%{_p}%::region::position2}
			remove yaml value "Menus.RegionClaim.Purchase.%{_id}%.Size" from "core.config" from x-coords of {-core::cache::player::%{_p}%::region::position2}
			wait a tick
			land_claim({_p}, {_price})

function land_build_fence(pos1: location, pos2: location):
	set {_calculate} to rounded difference between x-coords of {_pos1} and x-coords of {_pos2}
	set {_loc1} to {_pos1}
	set {_loc2} to {_pos2}
	loop {_calculate}+1 times:
		set {_get1} to location of highest solid block at {_loc1}
		set block at {_get1} to spruce fence
		remove 1 from x-coords of {_loc1}
		set {_get2} to location of highest solid block at {_loc2}
		set block at {_get2} to spruce fence
		add 1 to z-coords of {_loc2}		
		wait a tick	
	set {_loc1} to {_pos1}
	set {_loc2} to {_pos2}		
	loop {_calculate}+1 times:
		set {_get1} to location of highest solid block at {_loc1}
		set block at {_get1} to spruce fence
		remove 1 from z-coords of {_loc1}
		set {_get2} to location of highest solid block at {_loc2}
		set block at {_get2} to spruce fence
		add 1 to x-coords of {_loc2}		
		wait a tick	

function land_claim(p: player, price: number):
	if {-core::cache::player::%{_p}%::region::position1} is not set:
		send replacer "{number}" with "1" in yaml value "Messages.RegionClaim.PositionNotSet" from "core.config" to {_p}
		stop
	if {-core::cache::player::%{_p}%::region::position2} is not set:
		send replacer "{number}" with "2" in yaml value "Messages.RegionClaim.PositionNotSet" from "core.config" to {_p}
		stop					
	if {-core::cache::player::%{_p}%::region::position1} and {-core::cache::player::%{_p}%::region::position2} is set:
		if RegionUtils.checkOverlap({-core::cache::player::%{_p}%::region::position1} and {-core::cache::player::%{_p}%::region::position2}) is true:
			send yaml value "Messages.RegionClaim.Overlap" from "core.config" to {_p}
			stop
		if {_p}'s balance < {_price}:
			send yaml value "Messages.Homes.BalanceTooLow" from "core.config" to {_p}
			stop
		else:
			remove {_price} from {_p}'s balance
		set {_region} to RegionUtils.createRegion({_p}, {-core::cache::player::%{_p}%::region::position1} and {-core::cache::player::%{_p}%::region::position2})
		RegionUtils.addOwner({_region} and {_p})
		RegionUtils.setEnterMessage({_region} and replacer "{player}" with "%{_p}%" in yaml value "Messages.RegionClaim.DefaultGreeting" from "core.config")
		RegionUtils.setLeaveMessage({_region} and replacer "{player}" with "%{_p}%" in yaml value "Messages.RegionClaim.DefaultFarewell" from "core.config")
		#Fences
		if yaml value "Settings.RegionClaim.EnableFences" from "core.config" is true:
			land_build_fence({-core::cache::player::%{_p}%::region::position1} and {-core::cache::player::%{_p}%::region::position2})
		#Setting a home location so it will not lose it.
		set {_homeId} to size of yaml nodes with keys "Region" from "core.player.data.%uuid of {_p}%"
		set yaml value "Homes.Region-%{_homeId}%.Location" from "core.player.data.%uuid of {_p}%" to location of {_p}
		#
		set yaml value "Region.%{_region}%.Id" from "core.player.data.%uuid of {_p}%" to {_region}
		save yaml "core.player.data.%uuid of {_p}%"
		delete metadata value "LandClaim" of {_p}
		send yaml value "Messages.RegionClaim.ClaimSuccess" from "core.config" to {_p}
		delete {-core::cache::player::%{_p}%::region::position1} and {-core::cache::player::%{_p}%::region::position2}
		wait a tick
		land_ManageRegion({_p}, {_region}) 

function land_checkWorld(p: player) :: boolean:
	loop {-core::cache::RegionCaim.EnabledWorlds::*}:
		if loop-value-1 is {_p}'s world:
			set {_result} to true
	return {_result} ? false		

command land [<text>]:
	trigger:
		land_checkWorld(player) is true
		if arg-1 is not set:
			if RegionUtils.getRegionAt(player.getLocation()) is not set:
				landBrowsePurchase(player)
				stop
			set {_region} to RegionUtils.getRegionAt(player.getLocation())
			if RegionUtils.isOwner({_region} and player) is true:
				land_ManageRegion(player, {_region})

